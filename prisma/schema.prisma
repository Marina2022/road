// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                  String               @id @default(cuid())
  username            String               @unique
  email               String               @unique
  passwordHash        String
  sessions            Session[]
  tickets             Ticket[]
  comments            Comment[]
  PasswordResetTokens PasswordResetToken[]
}

model PasswordResetToken {
  tokenHash String   @id
  expiresAt DateTime
  userId    String
  User      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Ticket {
  id        Int          @id @default(autoincrement())
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  title     String
  content   String       @db.VarChar(1024)
  status    TicketStatus @default(OPEN)
  deadline  String
  bounty    Int
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]

  @@index([userId])
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  content   String   @db.VarChar(1024)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  ticketId  Int
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([ticketId])
  @@index([userId])
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  DONE
}
